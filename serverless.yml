service: kms
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  httpApi: 
    payload: '2.0'
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  endpointType: PRIVATE
  role: 
    Fn::ImportValue: ${self:provider.stage}-KMSServerlessAppRole
  vpc:
    securityGroupIds:
      - Fn::ImportValue: ${self:provider.stage}-LambdaSecurityGroup
    subnetIds:
      - ${env:SUBNET_ID_A, 'subnetIdA'}
      - ${env:SUBNET_ID_B, 'subnetIdB'}
      - ${env:SUBNET_ID_C, 'subnetIdC'}
  environment:
    RDF4J_SERVICE_URL: ${self:custom.cloudMap.${self:provider.stage}.serviceUrl, 'http://localhost:8080'}  
    RDF4J_USER_NAME: ${env:RDF4J_USER_NAME, 'rdf4j'}
    RDF4J_PASSWORD: ${env:RDF4J_PASSWORD, 'rdf4j'}
  # Prevent Serverless from attempting to modify the deployment bucket policy as NGAP does not allow it
  deploymentBucket:
    skipPolicySetup: true

# Package each lambda into individual zip files. This reduces the size of
# each lambda but increases the complexity of the compilation process slightly
package:
  individually: true

configValidationMode: error

#
# Lambda Functions
#
functions: ${file(./serverless-configs/${self:provider.name}-functions.yml)}

#
# Additional AWS Resources
#
resources: ${file(./serverless-configs/${self:provider.name}-resources.yml)}

plugins:
  - serverless-esbuild
  - serverless-finch
  - serverless-offline
  - serverless-s3-local

custom:
  siteName: kms-${self:provider.stage}
  collectionTemplatesBucketName: ${self:custom.siteName}-collection-templates
  infrastructureStackName: kms-infrastructure-${self:provider.stage}

  cloudMap:
    dev:
      serviceUrl: ${env:LOCAL_RDF4J_URL, 'http://localhost:8080'}
    sit:
      serviceUrl: ${cf:rdf4jLoadBalancerStack.RDF4JServiceUrl, env:SIT_RDF4J_URL, 'http://localhost:8080'}
    uat:
      serviceUrl: ${cf:rdf4jLoadBalancerStack.RDF4JServiceUrl, env:UAT_RDF4J_URL, 'http://localhost:8080'}
    prod:
      serviceUrl: ${cf:rdf4jLoadBalancerStack.RDF4JServiceUrl, env:PROD_RDF4J_URL, 'http://localhost:8080'}  # Finch (S3 sync plugin)
  client:
    bucketName: ${self:custom.siteName}
    distributionFolder: dist
    objectHeaders:
      assets/:
        - name: Cache-Control
          value: 'max-age=31536000'

    # Prevent the plugin from attempting to change the bucket policy
    manageResources: false

  # Default is 3000 so to avoid conflicts with rails applications we'll define a new port
  serverless-offline:
    httpPort: 4001
    lambdaPort: 4003
    allowCache: true
    noAuth: true

  s3:
    host: localhost
    directory: tmp

  # Don't minify the build in development
  minifyBuild:
    dev: false
    sit: true
    uat: true
    prod: true

  esbuild:
    bundle: true
    minify: ${self:custom.minifyBuild.${self:provider.stage}}
