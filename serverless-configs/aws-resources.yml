Resources:
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: ApiGatewayRestApi

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: ApiGatewayRestApi

  # This role must not be changed -- if it is removed Serverless will attempt to automatically
  # recreate it and deployments will fail because our permissions boundary does not allow for
  # creation of roles. This role is used specifically for S3 Lambda triggers that use existing
  # buckets, which is what we're using for forwarding cloudfront logs to Splunk.
  IamRoleCustomResourcesLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary:
        Fn::Join: [
          "", [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":policy/NGAPShRoleBoundary"
          ]
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  LambdaS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListAllMyBuckets"
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: "Allow"
            Resource: "*"
      PolicyName: ${self:provider.stage}-LambdaS3Policy
      Roles:
        - Ref: IamRoleCustomResourcesLambdaExecution

  TemplatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.collectionTemplatesBucketName}

Outputs:
