edlAuthorizer:
  handler: serverless/src/edlAuthorizer/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
publishHandler:
  handler: serverless/src/publish/handler.default
  events:
    - http:
        path: publish
        method: post
  provisionedConcurrency: 1

# This should not be called in production, only from the scheduler, otherwise
# it will timeout in 30 seconds.
syncConceptData:
  handler: serverless/src/syncConceptData/handler.default
  timeout: 900
  events:
    - http:
        path: sync-concept-data
        method: post
        async: true
        authorizer: 
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
    - schedule:
        name: SyncPublishedConcepts
        rate: cron(15 7 * * ? *) 
        input:
          version: "published"
    - schedule:
        name: SyncDraftConcepts
        rate: cron(15 8 * * ? *)
        input:
          version: "draft"
exportRdfToS3:
  handler: serverless/src/exportRdfToS3/handler.default
  timeout: 900
  events:
    - schedule:
        name: exportRdfToS3ForPublished
        rate: cron(0 0 * * ? *) 
        input:
          version: "published"
    - schedule:
        name: exportRdfToS3ForDraft
        rate: cron(0 1 * * ? *) 
        input:
          version: "draft"
errorLogger:
  handler: serverless/src/errorLogger/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: error-logger
getCapabilities:
  handler: serverless/src/getCapabilities/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /
status:
  handler: serverless/src/status/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: status
    # Keep JVM for RDF4j from going idle.
    - schedule:
            rate: cron(*/5 * * * ? *)
            enabled: true
getConcepts:
  handler: serverless/src/getConcepts/handler.default
  provisionedConcurrency: 1
  timeout: ${env:LAMBDA_TIMEOUT, '900'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/root
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/concept_scheme/{conceptScheme}
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/pattern/{pattern}
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/concept_scheme/{conceptScheme}/pattern/{pattern}
getConcept:
  handler: serverless/src/getConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept/short_name/{shortName}        
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept/alt_label/{altLabel}        
getKeyword:
  handler: serverless/src/getKeyword/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /keyword/{conceptId}
getConceptSchemes:
  handler: serverless/src/getConceptSchemes/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept_schemes
getKeywordsTree:
  handler: serverless/src/getKeywordsTree/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /tree/concept_scheme/{conceptScheme}
getConceptUpdatesReport:
  handler: serverless/src/getConceptUpdatesReport/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/operations/update_report
getKeywordFullPathHistory:
  handler: serverless/src/getKeywordFullPathHistory/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /keyword_version_report/{uuid}
createConcept:
  handler: serverless/src/createConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0        
updateConcept:
  handler: serverless/src/updateConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: put
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept
        authorizer: 
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
deleteConcept:
  handler: serverless/src/deleteConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: delete
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
recreateDatabase:
  handler: serverless/src/recreateDatabase/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: delete
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: recreateDatabase
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
getFullPath:
  handler: serverless/src/getFullPath/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept_fullpaths/concept_uuid/{conceptId}
getConceptVersions:
  handler: serverless/src/getConceptVersions/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept_versions/version_type/{versionType}
uploadRdfData:
  handler: serverless/src/uploadRdfData/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: upload-rdf-data
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
