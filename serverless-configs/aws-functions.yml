errorLogger:
  handler: serverless/src/errorLogger/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: error-logger
status:
  handler: serverless/src/status/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: status
getConcepts:
  handler: serverless/src/getConcepts/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '900'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concepts
getConcept:
  handler: serverless/src/getConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}
createConcept:
  handler: serverless/src/createConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}

updateConcept:
  handler: serverless/src/updateConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: put
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}

deleteConcept:
  handler: serverless/src/deleteConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: delete
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}
