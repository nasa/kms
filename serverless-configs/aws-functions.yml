edlAuthorizer:
    handler: serverless/src/edlAuthorizer/handler.default
    timeout: ${env:LAMBDA_TIMEOUT, '30'}
errorLogger:
  handler: serverless/src/errorLogger/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: error-logger
getCapabilities:
  handler: serverless/src/getCapabilities/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /
status:
  handler: serverless/src/status/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: status
getConcepts:
  handler: serverless/src/getConcepts/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '900'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/root
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/concept_scheme/{conceptScheme}
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/pattern/{pattern}
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concepts/concept_scheme/{conceptScheme}/pattern/{pattern}
getConcept:
  handler: serverless/src/getConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept/short_name/{shortName}        
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept/alt_label/{altLabel}        
getConceptSchemes:
  handler: serverless/src/getConceptSchemes/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept_schemes
getKeywordsTree:
  handler: serverless/src/getKeywordsTree/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /tree/concept_scheme/{conceptScheme}
createConcept:
  handler: serverless/src/createConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
        
createConcepts:
  handler: serverless/src/createConcepts/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concepts
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
updateConcept:
  handler: serverless/src/updateConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: put
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
deleteConcept:
  handler: serverless/src/deleteConcept/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: delete
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: concept/{conceptId}
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
recreateDatabase:
  handler: serverless/src/recreateDatabase/handler.default
  timeout: 900
  events:
    - http:
        method: delete
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: recreateDatabase
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
exportRdfToS3:
  handler: serverless/src/exportRdfToS3/handler.default
  timeout: 900
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: exportRdfToS3
    - schedule: cron(0 0 * * ? *)
getFullPath:
  handler: serverless/src/getFullPath/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept_fullpaths/concept_uuid/{conceptId}
getConceptVersions:
  handler: serverless/src/getConceptVersions/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /concept_versions/version_type/{versionType}
publish:
  handler: serverless/src/publish/handler.default
  timeout: 900
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: /publish



